
R version 3.5.3 (2019-03-11) -- "Great Truth"
Copyright (C) 2019 The R Foundation for Statistical Computing
Platform: x86_64-apple-darwin15.6.0 (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> pkgname <- "newsanchor"
> source(file.path(R.home("share"), "R", "examples-header.R"))
> options(warn = 1)
> library('newsanchor')
> 
> base::assign(".oldSearch", base::search(), pos = 'CheckExEnv')
> base::assign(".old_wd", base::getwd(), pos = 'CheckExEnv')
> cleanEx()
> nameEx("get_everything")
> ### * get_everything
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: get_everything
> ### Title: Get resources of newsapi.org
> ### Aliases: get_everything
> 
> ### ** Examples
> 
> ## Not run: 
> ##D df <- get_everything(query = "stuttgart", language = "de")
> ##D df <- get_everything(query = "mannheim", from = "2019-01-02 12:00:00")
> ## End(Not run)
> 
> 
> 
> cleanEx()
> nameEx("get_everything_all")
> ### * get_everything_all
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: get_everything_all
> ### Title: Returns all articles from newsapi.org in one data frame
> ### Aliases: get_everything_all
> 
> ### ** Examples
> 
> ## Not run: 
> ##D df <- get_everything_all(query = "mannheim")
> ##D df <- get_everything_all(query = "stuttgart", language = "en")
> ## End(Not run)
> 
> 
> 
> cleanEx()
> nameEx("get_headlines")
> ### * get_headlines
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: get_headlines
> ### Title: Returns selected headlines from newsapi.org
> ### Aliases: get_headlines
> 
> ### ** Examples
> 
> ## Not run: 
> ##D df <- get_headlines(sources = "bbc-news")
> ##D df <- get_headlines(query = "sports", page = 2)
> ##D df <- get_headlines(category = "business")
> ## End(Not run)
> 
> 
> 
> cleanEx()
> nameEx("get_headlines_all")
> ### * get_headlines_all
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: get_headlines_all
> ### Title: Returns all headlines from newsapi.org
> ### Aliases: get_headlines_all
> 
> ### ** Examples
> 
> ## Not run: 
> ##D df <- get_headlines_all(query = "sports")
> ##D df <- get_headlines_all(category = "health")
> ## End(Not run)
> 
> 
> 
> cleanEx()
> nameEx("get_sources")
> ### * get_sources
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: get_sources
> ### Title: Returns selected sources from newsapi.org
> ### Aliases: get_sources
> 
> ### ** Examples
> 
> ## Not run: 
> ##D get_sources(api_key)
> ##D get_sources(api_key, category = "technology")
> ##D get_sources(api_key, language = "en")
> ## End(Not run)
> 
> 
> 
> 
> cleanEx()
> nameEx("sample_response")
> ### * sample_response
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: sample_response
> ### Title: Sample Response Object
> ### Aliases: sample_response
> ### Keywords: datasets
> 
> ### ** Examples
> 
> ## Not run: 
> ##D response <- get_everything(query   = "Trump",
> ##D                            sources = "the-new-york-times",
> ##D                            from    = "2018-12-03",
> ##D                            to      = "2018-12-09") 
> ## End(Not run)
> 
> 
> 
> cleanEx()
> nameEx("set_api_key")
> ### * set_api_key
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: set_api_key
> ### Title: Add API key to the .Renviron
> ### Aliases: set_api_key
> 
> ### ** Examples
> 
> ## Not run: 
> ##D # this is not an actual API key
> ##D api_key <- "5t5yno5qqkufxis5q2vzx26vxq2hqej9"
> ##D set_api_key(api_key, tempdir())
> ## End(Not run)
> 
> 
> 
> ### * <FOOTER>
> ###
> cleanEx()
> options(digits = 7L)
> base::cat("Time elapsed: ", proc.time() - base::get("ptime", pos = 'CheckExEnv'),"\n")
Time elapsed:  0.498 0.032 0.537 0 0 
> grDevices::dev.off()
null device 
          1 
> ###
> ### Local variables: ***
> ### mode: outline-minor ***
> ### outline-regexp: "\\(> \\)?### [*]+" ***
> ### End: ***
> quit('no')
